# Matriz prueba

a = [[3,3,3,3],[1,1,1,1],[7,7,7,7],[6,6,6,6]]
b = [[5,5,5,5],[4,4,4,4],[8,8,8,8],[2,2,2,2]]

# matrices en tiempo O(n^3) que calcule cada elemento de la matriz C como c_{ij} = \sum_{k=1}^n a_{ik}*b_{kj}

def nue_m(p, q): # create a matrix filled with 0s
    matrix = [[0 for row in range(p)] for col in range(q)]
    return matrix

def ikj_matrix_product(a, b):
    n = len(a)
    C = [[0 for i in xrange(n)] for j in xrange(n)]
    for i in xrange(n):
        for k in xrange(n):
            for j in xrange(n):
                c[i][j] += a[i][k] * b[k][j]
    return c

def sustraer(a, b): # multiply the two matrices
    if len(a[0]) != len(b): # if # of col != # of rows:
        return "Matrices are not m*n and n*p"
    else:
        p_matrix = nue_m(len(a), len(b[0]))
        for i in range(len(a)):
            for j in range(len(b[0])):
                for k in range(len(b)):
                    p_matrix[i][j] += a[i][k]*b[k][j]
    return p_matrix

def Der(a, b): 
    if len(a[0]) != len(b): 
        return 
    else:
        p_matrix = nue_m(len(a), len(b[0]))
        for i in range(len(a)):
            for j in range(len(b[0])):
                for k in range(len(b)):
                    p_matrix[i][j] += a[i][k]*b[k][j]
    return p_matrix

# multiplicación de matrices en tiempo O(n^3) donde cada matriz es dividida en 4 partes iguales.

def split(matrix): 
    a = matrix
    b = matrix
    c = matrix
    d = matrix
    while(len(a) > len(matrix)/2):
        a = a[:len(a)//2]
        b = b[:len(b)//2]
        c = c[len(c)//2:]
        d = d[len(d)//2:]
    while(len(a[0]) > len(matrix[0])/2):
        for i in range(len(a[0])//2):
            a[i] = a[i][:len(a[i])//2]
            b[i] = b[i][len(b[i])//2:]
            c[i] = c[i][:len(c[i])//2]
            d[i] = d[i][len(d[i])//2:]
    return a,b,c,d

def añad_m(a, b):
    if type(a) == int:
        d = a + b
    else:
        d = []
        for i in range(len(a)):
            c = []
            for j in range(len(a[0])):
                c.append(a[i][j] + b[i][j])
            d.append(c)
    return d

def sub_m(a, b):
    if type(a) == int:
        d = a - b
    else:
        d = []
        for i in range(len(a)):
            c = []
            for j in range(len(a[0])):
                c.append(a[i][j] - b[i][j])
            d.append(c)
    return d

# algoritmo de strassen

def strassen(a, b, q):
    if q == 1:
        d = [[0]]
        d[0][0] = a[0][0] * b[0][0]
        return d
    else:
        a11, a12, a21, a22 = split(a)
        b11, b12, b21, b22 = split(b)

        p1 = strassen(añad_m(a11,a22), añad_m(b11,b22), q/2)

        p2 = strassen(añad_m(a21,a22), b11, q/2)

        p3 = strassen(a11, sub_m(b12,b22), q/2)

        p4 = strassen(a22, sub_m(b12,b11), q/2)

        p5 = strassen(añad_m(a11,a12), b22, q/2)

        p6 = strassen(sub_m(a21,a11), añad_m(b11,b12), q/2)

        p7 = strassen(sub_m(a12,a22), añad_m(b21,b22), q/2)


        c11 = añad_m(sub_m(añad_m(p1, p4), p5), p7)

        c12 = añad_m(p3, p5)

        c21 = añad_m(p2, p4)

        c22 = añad_m(sub_m(añad_m(p1, p3), p2), p6)

        c = nue_m(len(c11)*2,len(c11)*2)
        for i in range(len(c11)):
            for j in range(len(c11)):
                c[i][j]                   = c11[i][j]
                c[i][j+len(c11)]          = c12[i][j]
                c[i+len(c11)][j]          = c21[i][j]
                c[i+len(c11)][j+len(c11)] = c22[i][j]

        return c

print ("Strassen:")
print (strassen(a, b, 4))
print ("Final:")
print (sustraer(a, b))
